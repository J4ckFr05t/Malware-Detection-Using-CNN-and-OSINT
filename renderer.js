//const {BrowserWindow} = require('electron').remote;
//var mainWindow = BrowserWindow.getFocusedWindow();
//const remote = require ("electron").remote;

let {PythonShell} = require('python-shell')

var nodeConsole = require('console');
var myConsole = new nodeConsole.Console(process.stdout, process.stderr);

/*

!!! Progress Bar animation Fucntions !!!
Scanning Bar      : start animation     - startBar1()
                  : finish animation    - completeBar1()
Updating Bar      : start animation     - startBar2()
                    finish animation    - completeBar2()

!!! Network Status Changing !!!
Switching Network : networkSwitch(int)
                    0 : changes network icon to red
                    1 : changes network icon to green
DNS LookUp Google : checkConnection     - liveCheck()
                    uses dns.lookup() checking for internet  

*/

function startBar1(){
    t = '30s'
    const progress = document.querySelector('.progressBar85');
    progress.style.width = progress.getAttribute('percent85') + 'px';
    progress.style["transition-duration"] = t;
    progress.style["-webkit-transition-duration"] = t;
    progress.style.opacity = 1;
    }
    

function completeBar1(){
    t = '0.5s'
    const progress1 = document.querySelector('.progressBar100');
    progress1.style.width = progress1.getAttribute('percent100') + 'px';
    progress1.style["transition-duration"] = t;
    progress1.style["-webkit-transition-duration"] = t;
    progress1.style.opacity = 1;
    }
    
function emptyBar1(){
    t = '5s'
    const progress1 = document.querySelector('.progressBar100');
    progress1.style.width = '0' + 'px';
    progress1.style["transition-duration"] = t;
    progress1.style["-webkit-transition-duration"] = t;
    progress1.style.opacity = 1;
    }


function startBar2(){
        t = '900s'
        const progress = document.querySelector('.progressBar85_2');
        progress.style.width = progress.getAttribute('percent85') + 'px';
        progress.style["transition-duration"] = t;
        progress.style["-webkit-transition-duration"] = t;
        progress.style.opacity = 1;
    }
        
    
function completeBar2(){
        t = '5s';
        const progress1 = document.querySelector('.progressBar100_2');
        progress1.style.width = progress1.getAttribute('percent100') + 'px';
        progress1.style["transition-duration"] = t;
        progress1.style["-webkit-transition-duration"] = t;
        progress1.style.opacity = 1;
    }

//choosing python path for platforms
if (process.platform == 'darwin') { 
    PyPath = '/usr/local/bin/python3'
} 
else if(process.platform == 'linux'){
    PyPath = '/usr/bin/python3'
}
else if (process.platform == 'win32'){ 
    username = require("os").userInfo().username
    PyPath = 'C:\\User\\' + username + '\\AppData\\Local\\Programs\\Python\\Python38\\python'
    //PyPath = 'C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\python'
    
}
else {
    PyPath = '/usr/bin/python3'
}







function closeWindow(){
    electron.remote.getCurrentWindow().close();
}

function minimizeWindow(){
    electron.remote.getCurrentWindow().minimize();
}

document.querySelector('#closeButton').addEventListener('click', () => {
    closeWindow();

})

document.querySelector('#minimizeButton').addEventListener('click', () => {
    minimizeWindow()
})

//Flag variable to make Scan Button Unclickable before Uploading File
flag1 = false;

//Flag variable to make Upload Button Unclickable during scan
flag2 = true;

//Flag variable to make Update Button Unclickable while Updating
flag3 = true;

document.querySelector('#updateButton').addEventListener('click', () =>{
    if(flag3 == true){
        flag3 = false;
        startBar2()
        console.log('update acknowledged');
	let option = {
        mode: 'text',
        pythonPath: 'python3',
        pythonOptions: ['-u'], // get print results in real-time
        scriptPath: './',
      };
        PythonShell.run('update.py', option, function (err, results) {
            console.log('updating .....plz wait')
  	if (err) throw err;
	if (results[results.length -1] == 'True'){
    completeBar2()
    document.getElementById("descriptionImg").src = "./ui_elements/updateMalwareDefinitionsTrue.png"
    flag3 = true;	
	}
      console.log('finished');
});

}
})

const electron = require('electron'); 
const path = require('path'); 
  
// Importing dialog module using remote 
const dialog = electron.remote.dialog; 
  
var uploadFile = document.getElementById('uploadButton'); 
  
// Defining a Global file path Variable to store  
// user-selected file 
global.filepath = undefined; 
  
uploadFile.addEventListener('click', () => {
    if(flag2 == true){
    emptyBar1()
    document.getElementById('scanResult').value='Scan Result'
    document.getElementById("filePath").value = ''

// If the platform is 'win32' or 'Linux' 
    if (process.platform !== 'darwin') { 
        // Resolves to a Promise<Object> 
        dialog.showOpenDialog({ 
            title: 'Select the File to Upload', 
            defaultPath: path.join(__dirname, '/'), 
            buttonLabel: 'Upload', 
            // Specifying the File Selector Property 
            properties: ['openFile'] 
        }).then(file => { 
            // Stating whether dialog operation was 
            // cancelled or not. 
            console.log(file.canceled); 
            if (!file.canceled) { 
              // Updating the GLOBAL filepath variable  
              // to user-selected file. 
              global.filepath = file.filePaths[0].toString(); 
              console.log(global.filepath); 
              document.getElementById("filePath").value = global.filepath;
              flag1 = true;
            }   
        }).catch(err => { 
            console.log(err) 
        }); 
    } 
    else { 
        // If the platform is 'darwin' (macOS) 
        dialog.showOpenDialog({ 
            title: 'Select the File to Upload', 
            defaultPath: path.join(__dirname, '/'), 
            buttonLabel: 'Upload',
            // Specifying the File Selector and Directory  
            // Selector Property In macOS 
            properties: ['openFile', 'openDirectory'] 
        }).then(file => { 
            console.log(file.canceled); 
            if (!file.canceled) { 
              global.filepath = file.filePaths[0].toString(); 
              console.log(global.filepath);
              document.getElementById("filePath").value = global.filepath;
              flag1 = true;
            }   
        }).catch(err => { 
            console.log(err) 
        }); 
    }
}
});



document.querySelector('#scanButton').addEventListener('click', () => {
    if(flag1 == true){
        flag2 = false;
    document.getElementById('scanResult').value=''
    startBar1()
    console.log("scan button acknowledges")
    let options = {
        mode: 'text',
        pythonPath: 'python3',
        pythonOptions: ['-u'], // get print results in real-time
        scriptPath: './',
        args: [global.filepath]
      };
    PythonShell.run('scan.py', options, function (err, results) {
        console.log("scan started")
        if (err) throw err;
        // results is an array consisting of messages collected during execution
        document.getElementById("scanResult").value = results[results.length -1];
        console.log("scan finished")
        console.log('results.length:', results);
        completeBar1()
        flag2 = true;   
      });
      flag1 = false;
    }
})




    
    const dns = require("dns");
    let isConnected = false;

         
      function checkInternet() {
        dns.lookup("www.google.com", function(err, addr) {
          if (err) {
            //myConsole.log("network error");
            networkSwitch(0);
            if (isConnected) {
            }
            isConnected = false;
          } else {
              networkSwitch(1);
            //myConsole.log("network connected");
            if (isConnected) {
            } else {
              networkSwitch(1);
            }
            isConnected = true;
          }
        });
      }
      
      setInterval(function() {
        checkInternet();
      }, 1000);

function networkSwitch(networkStatus){
    if (networkStatus == 1) {
        document.getElementById("networkStatus").src = "./ui_elements/networkTrue.png";
    }else if (networkStatus == 0) {
        document.getElementById("networkStatus").src = "./ui_elements/networkFalse.png";
    }
}
